<class XVector>
<class ArrayXVector>
<class ConcatXVector>
<class RepeatXVector>
<class ReverseXVector>
<class SwizzleXVector>
<class BlockXVector>
<class Unit>
<class BlockFn1>
<class BlockFn2>
<class BlockFn3>
<class BlockFn4>
<class XVectorTester>
Testing rxv01
(at:ifAbsent: rxv01 1 {nil}) => nil
(at:ifAbsent: rxv01 2 {nil}) => nil
(at:ifAbsent: rxv01 3 {nil}) => nil
(at:ifAbsent: rxv01 4 {nil}) => nil
(at:ifAbsent: rxv01 5 {nil}) => nil
(at:ifAbsent: rxv01 7 {nil}) => nil
(at:ifAbsent: rxv01 8 {nil}) => nil
(at:ifAbsent: rxv01 9 {nil}) => nil
(at:ifAbsent: rxv01 1073741823 {nil}) => nil
(at:ifAbsent: rxv01 1073741824 {nil}) => nil
(at:ifAbsent: rxv01 1073741825 {nil}) => nil
(at:ifAbsent: rxv01 -1073741825 {nil}) => nil
(at:ifAbsent: rxv01 -1073741824 {nil}) => nil
(at:ifAbsent: rxv01 -1073741823 {nil}) => nil
(at:ifAbsent: rxv01 -9 {nil}) => nil
(at:ifAbsent: rxv01 -8 {nil}) => nil
(at:ifAbsent: rxv01 -7 {nil}) => nil
(at:ifAbsent: rxv01 -5 {nil}) => nil
(at:ifAbsent: rxv01 -4 {nil}) => nil
(at:ifAbsent: rxv01 -3 {nil}) => nil
(at:ifAbsent: rxv01 -2 {nil}) => nil
(at:ifAbsent: rxv01 -1 {nil}) => nil
Testing rxv01
(print rxv01) => << >>
(detect:ifNone: rxv01 negative) => nil
(detect:ifNone: rxv01 positive) => nil
Testing rxv01
(sum rxv01) => 0
Testing rxv01
(product rxv01) => 1
Testing rxv01
Testing rxv01
Testing rxv01
(= rxv01 nil) => <False>
(= rxv01 <True>) => <False>
(= rxv01 <False>) => <False>
(= rxv01 0) => <False>
(= rxv01 1) => <False>
(= rxv01 2) => <False>
(= rxv01 42) => <False>
(= rxv01 xv01) => <True>
(= rxv01 xv02) => <False>
(= rxv01 xv03) => <False>
(= rxv01 xv04) => <False>
(= rxv01 xv05) => <False>
(= rxv01 xv06) => <False>
(= rxv01 xv07) => <False>
(= rxv01 xv08) => <False>
(= rxv01 xv09) => <False>
(= rxv01 xv10) => <False>
(= rxv01 xv11) => <False>
(= rxv01 xv12) => <False>
(= rxv01 xv13) => <False>
(= rxv01 rxv01) => <True>
(= rxv01 rxv02) => <False>
(= rxv01 rxv03) => <False>
(= rxv01 rxv04) => <False>
(= rxv01 rxv05) => <False>
Testing rxv01
(< rxv01 xv01) => <False>
(< rxv01 xv02) => <True>
(< rxv01 xv03) => <True>
(< rxv01 xv04) => <True>
(< rxv01 xv05) => <True>
(< rxv01 xv06) => <True>
(< rxv01 xv07) => <True>
(< rxv01 xv08) => <True>
(< rxv01 xv09) => <True>
(< rxv01 xv10) => <True>
(< rxv01 xv11) => <True>
(< rxv01 rxv01) => <False>
(< rxv01 rxv02) => <True>
(< rxv01 rxv03) => <True>
(< rxv01 rxv04) => <True>
(< rxv01 rxv05) => <True>
Testing rxv01
Testing rxv02
(at:ifAbsent: rxv02 1 {nil}) => 1
(at:ifAbsent: rxv02 2 {nil}) => nil
(at:ifAbsent: rxv02 3 {nil}) => nil
(at:ifAbsent: rxv02 4 {nil}) => nil
(at:ifAbsent: rxv02 5 {nil}) => nil
(at:ifAbsent: rxv02 7 {nil}) => nil
(at:ifAbsent: rxv02 8 {nil}) => nil
(at:ifAbsent: rxv02 9 {nil}) => nil
(at:ifAbsent: rxv02 1073741823 {nil}) => nil
(at:ifAbsent: rxv02 1073741824 {nil}) => nil
(at:ifAbsent: rxv02 1073741825 {nil}) => nil
(at:ifAbsent: rxv02 -1073741825 {nil}) => nil
(at:ifAbsent: rxv02 -1073741824 {nil}) => nil
(at:ifAbsent: rxv02 -1073741823 {nil}) => nil
(at:ifAbsent: rxv02 -9 {nil}) => nil
(at:ifAbsent: rxv02 -8 {nil}) => nil
(at:ifAbsent: rxv02 -7 {nil}) => nil
(at:ifAbsent: rxv02 -5 {nil}) => nil
(at:ifAbsent: rxv02 -4 {nil}) => nil
(at:ifAbsent: rxv02 -3 {nil}) => nil
(at:ifAbsent: rxv02 -2 {nil}) => nil
(at:ifAbsent: rxv02 -1 {nil}) => 1
Testing rxv02
(print rxv02) => << 1 >>
(includes: rxv02 nil) => <False>
(occurrencesOf: rxv02 nil) => 0
(includes: rxv02 <True>) => <False>
(occurrencesOf: rxv02 <True>) => 0
(includes: rxv02 <False>) => <False>
(occurrencesOf: rxv02 <False>) => 0
(includes: rxv02 0) => <False>
(occurrencesOf: rxv02 0) => 0
(includes: rxv02 1) => <True>
(occurrencesOf: rxv02 1) => 1
(includes: rxv02 2) => <False>
(occurrencesOf: rxv02 2) => 0
(includes: rxv02 42) => <False>
(occurrencesOf: rxv02 42) => 0
(detect:ifNone: rxv02 negative) => nil
(detect:ifNone: rxv02 positive) => 1
Testing rxv02
(sum rxv02) => 1
Testing rxv02
(product rxv02) => 1
Testing rxv02
(min rxv02) => 1
Testing rxv02
(max rxv02) => 1
Testing rxv02
(= rxv02 nil) => <False>
(= rxv02 <True>) => <False>
(= rxv02 <False>) => <False>
(= rxv02 0) => <False>
(= rxv02 1) => <False>
(= rxv02 2) => <False>
(= rxv02 42) => <False>
(= rxv02 xv01) => <False>
(= rxv02 xv02) => <True>
(= rxv02 xv03) => <False>
(= rxv02 xv04) => <False>
(= rxv02 xv05) => <False>
(= rxv02 xv06) => <False>
(= rxv02 xv07) => <False>
(= rxv02 xv08) => <False>
(= rxv02 xv09) => <False>
(= rxv02 xv12) => <False>
(= rxv02 xv13) => <False>
(= rxv02 rxv01) => <False>
(= rxv02 rxv02) => <True>
(= rxv02 rxv03) => <False>
(= rxv02 rxv04) => <False>
(= rxv02 rxv05) => <False>
Testing rxv02
(< rxv02 xv01) => <False>
(< rxv02 xv02) => <False>
(< rxv02 xv03) => <True>
(< rxv02 xv04) => <True>
(< rxv02 xv05) => <False>
(< rxv02 xv06) => <False>
(< rxv02 xv07) => <False>
(< rxv02 xv08) => <True>
(< rxv02 xv09) => <True>
(< rxv02 rxv01) => <False>
(< rxv02 rxv02) => <False>
(< rxv02 rxv03) => <True>
(< rxv02 rxv04) => <True>
(< rxv02 rxv05) => <False>
Testing rxv02
Testing rxv03
(at:ifAbsent: rxv03 1 {nil}) => 3
(at:ifAbsent: rxv03 2 {nil}) => 2
(at:ifAbsent: rxv03 3 {nil}) => 1
(at:ifAbsent: rxv03 4 {nil}) => nil
(at:ifAbsent: rxv03 5 {nil}) => nil
(at:ifAbsent: rxv03 7 {nil}) => nil
(at:ifAbsent: rxv03 8 {nil}) => nil
(at:ifAbsent: rxv03 9 {nil}) => nil
(at:ifAbsent: rxv03 1073741823 {nil}) => nil
(at:ifAbsent: rxv03 1073741824 {nil}) => nil
(at:ifAbsent: rxv03 1073741825 {nil}) => nil
(at:ifAbsent: rxv03 -1073741825 {nil}) => nil
(at:ifAbsent: rxv03 -1073741824 {nil}) => nil
(at:ifAbsent: rxv03 -1073741823 {nil}) => nil
(at:ifAbsent: rxv03 -9 {nil}) => nil
(at:ifAbsent: rxv03 -8 {nil}) => nil
(at:ifAbsent: rxv03 -7 {nil}) => nil
(at:ifAbsent: rxv03 -5 {nil}) => nil
(at:ifAbsent: rxv03 -4 {nil}) => nil
(at:ifAbsent: rxv03 -3 {nil}) => 3
(at:ifAbsent: rxv03 -2 {nil}) => 2
(at:ifAbsent: rxv03 -1 {nil}) => 1
Testing rxv03
(print rxv03) => << 3 2 1 >>
(includes: rxv03 nil) => <False>
(occurrencesOf: rxv03 nil) => 0
(includes: rxv03 <True>) => <False>
(occurrencesOf: rxv03 <True>) => 0
(includes: rxv03 <False>) => <False>
(occurrencesOf: rxv03 <False>) => 0
(includes: rxv03 0) => <False>
(occurrencesOf: rxv03 0) => 0
(includes: rxv03 1) => <True>
(occurrencesOf: rxv03 1) => 1
(includes: rxv03 2) => <True>
(occurrencesOf: rxv03 2) => 1
(includes: rxv03 42) => <False>
(occurrencesOf: rxv03 42) => 0
(detect:ifNone: rxv03 negative) => nil
(detect:ifNone: rxv03 positive) => 3
Testing rxv03
(sum rxv03) => 6
Testing rxv03
(product rxv03) => 6
Testing rxv03
(min rxv03) => 1
Testing rxv03
(max rxv03) => 3
Testing rxv03
(= rxv03 nil) => <False>
(= rxv03 <True>) => <False>
(= rxv03 <False>) => <False>
(= rxv03 0) => <False>
(= rxv03 1) => <False>
(= rxv03 2) => <False>
(= rxv03 42) => <False>
(= rxv03 xv01) => <False>
(= rxv03 xv02) => <False>
(= rxv03 xv03) => <False>
(= rxv03 xv04) => <False>
(= rxv03 xv05) => <False>
(= rxv03 xv06) => <False>
(= rxv03 xv07) => <False>
(= rxv03 xv08) => <False>
(= rxv03 xv09) => <False>
(= rxv03 xv12) => <False>
(= rxv03 xv13) => <False>
(= rxv03 rxv01) => <False>
(= rxv03 rxv02) => <False>
(= rxv03 rxv03) => <True>
(= rxv03 rxv04) => <False>
(= rxv03 rxv05) => <False>
Testing rxv03
(< rxv03 xv01) => <False>
(< rxv03 xv02) => <False>
(< rxv03 xv03) => <False>
(< rxv03 xv04) => <False>
(< rxv03 xv05) => <False>
(< rxv03 xv06) => <False>
(< rxv03 xv07) => <False>
(< rxv03 xv08) => <False>
(< rxv03 xv09) => <False>
(< rxv03 rxv01) => <False>
(< rxv03 rxv02) => <False>
(< rxv03 rxv03) => <False>
(< rxv03 rxv04) => <True>
(< rxv03 rxv05) => <False>
Testing rxv03
Testing rxv04
(at:ifAbsent: rxv04 1 {nil}) => 6
(at:ifAbsent: rxv04 2 {nil}) => 5
(at:ifAbsent: rxv04 3 {nil}) => 4
(at:ifAbsent: rxv04 4 {nil}) => 3
(at:ifAbsent: rxv04 5 {nil}) => 2
(at:ifAbsent: rxv04 7 {nil}) => nil
(at:ifAbsent: rxv04 8 {nil}) => nil
(at:ifAbsent: rxv04 9 {nil}) => nil
(at:ifAbsent: rxv04 1073741823 {nil}) => nil
(at:ifAbsent: rxv04 1073741824 {nil}) => nil
(at:ifAbsent: rxv04 1073741825 {nil}) => nil
(at:ifAbsent: rxv04 -1073741825 {nil}) => nil
(at:ifAbsent: rxv04 -1073741824 {nil}) => nil
(at:ifAbsent: rxv04 -1073741823 {nil}) => nil
(at:ifAbsent: rxv04 -9 {nil}) => nil
(at:ifAbsent: rxv04 -8 {nil}) => nil
(at:ifAbsent: rxv04 -7 {nil}) => nil
(at:ifAbsent: rxv04 -5 {nil}) => 5
(at:ifAbsent: rxv04 -4 {nil}) => 4
(at:ifAbsent: rxv04 -3 {nil}) => 3
(at:ifAbsent: rxv04 -2 {nil}) => 2
(at:ifAbsent: rxv04 -1 {nil}) => 1
Testing rxv04
(print rxv04) => << 6 5 4 3 2 1 >>
(includes: rxv04 nil) => <False>
(occurrencesOf: rxv04 nil) => 0
(includes: rxv04 <True>) => <False>
(occurrencesOf: rxv04 <True>) => 0
(includes: rxv04 <False>) => <False>
(occurrencesOf: rxv04 <False>) => 0
(includes: rxv04 0) => <False>
(occurrencesOf: rxv04 0) => 0
(includes: rxv04 1) => <True>
(occurrencesOf: rxv04 1) => 1
(includes: rxv04 2) => <True>
(occurrencesOf: rxv04 2) => 1
(includes: rxv04 42) => <False>
(occurrencesOf: rxv04 42) => 0
(detect:ifNone: rxv04 negative) => nil
(detect:ifNone: rxv04 positive) => 6
Testing rxv04
(sum rxv04) => 21
Testing rxv04
(product rxv04) => 720
Testing rxv04
(min rxv04) => 1
Testing rxv04
(max rxv04) => 6
Testing rxv04
(= rxv04 nil) => <False>
(= rxv04 <True>) => <False>
(= rxv04 <False>) => <False>
(= rxv04 0) => <False>
(= rxv04 1) => <False>
(= rxv04 2) => <False>
(= rxv04 42) => <False>
(= rxv04 xv01) => <False>
(= rxv04 xv02) => <False>
(= rxv04 xv03) => <False>
(= rxv04 xv04) => <False>
(= rxv04 xv05) => <False>
(= rxv04 xv06) => <False>
(= rxv04 xv07) => <False>
(= rxv04 xv08) => <False>
(= rxv04 xv09) => <False>
(= rxv04 xv12) => <False>
(= rxv04 xv13) => <False>
(= rxv04 rxv01) => <False>
(= rxv04 rxv02) => <False>
(= rxv04 rxv03) => <False>
(= rxv04 rxv04) => <True>
(= rxv04 rxv05) => <False>
Testing rxv04
(< rxv04 xv01) => <False>
(< rxv04 xv02) => <False>
(< rxv04 xv03) => <False>
(< rxv04 xv04) => <False>
(< rxv04 xv05) => <False>
(< rxv04 xv06) => <False>
(< rxv04 xv07) => <False>
(< rxv04 xv08) => <False>
(< rxv04 xv09) => <False>
(< rxv04 rxv01) => <False>
(< rxv04 rxv02) => <False>
(< rxv04 rxv03) => <False>
(< rxv04 rxv04) => <False>
(< rxv04 rxv05) => <False>
Testing rxv04
(fromIndex:toIndex: rxv04 1 1) => << 6 >>
(fromIndex:toIndex: rxv04 1 2) => << 6 5 >>
(fromIndex:toIndex: rxv04 1 3) => << 6 5 4 >>
(fromIndex:toIndex: rxv04 1 5) => << 6 5 4 3 2 >>
(fromIndex:toIndex: rxv04 2 2) => << 5 >>
(fromIndex:toIndex: rxv04 2 4) => << 5 4 3 >>
(fromIndex:toIndex: rxv04 -1 -1) => << 1 >>
(fromIndex:toIndex: rxv04 -2 -1) => << 2 1 >>
(fromIndex:toIndex: rxv04 -3 -1) => << 3 2 1 >>
(fromIndex:toIndex: rxv04 -5 -1) => << 5 4 3 2 1 >>
(fromIndex:toIndex: rxv04 -2 -2) => << 2 >>
(fromIndex:toIndex: rxv04 -4 -2) => << 4 3 2 >>
(fromIndex:toIndex: rxv04 -1 1) => << 1 6 >>
(fromIndex:toIndex: rxv04 -2 2) => << 2 1 6 5 >>
(fromIndex:toIndex: rxv04 -3 3) => << 3 2 1 6 5 4 >>
(fromIndex:toIndex: rxv04 -4 4) => << 4 3 >>
(fromIndex:toIndex: rxv04 -5 5) => << 5 4 3 2 >>
Testing rxv05
(at:ifAbsent: rxv05 1 {nil}) => -1
(at:ifAbsent: rxv05 2 {nil}) => -2
(at:ifAbsent: rxv05 3 {nil}) => -3
(at:ifAbsent: rxv05 4 {nil}) => -4
(at:ifAbsent: rxv05 5 {nil}) => -5
(at:ifAbsent: rxv05 7 {nil}) => nil
(at:ifAbsent: rxv05 8 {nil}) => nil
(at:ifAbsent: rxv05 9 {nil}) => nil
(at:ifAbsent: rxv05 1073741823 {nil}) => nil
(at:ifAbsent: rxv05 1073741824 {nil}) => nil
(at:ifAbsent: rxv05 1073741825 {nil}) => nil
(at:ifAbsent: rxv05 -1073741825 {nil}) => nil
(at:ifAbsent: rxv05 -1073741824 {nil}) => nil
(at:ifAbsent: rxv05 -1073741823 {nil}) => nil
(at:ifAbsent: rxv05 -9 {nil}) => nil
(at:ifAbsent: rxv05 -8 {nil}) => nil
(at:ifAbsent: rxv05 -7 {nil}) => nil
(at:ifAbsent: rxv05 -5 {nil}) => -2
(at:ifAbsent: rxv05 -4 {nil}) => -3
(at:ifAbsent: rxv05 -3 {nil}) => -4
(at:ifAbsent: rxv05 -2 {nil}) => -5
(at:ifAbsent: rxv05 -1 {nil}) => -6
Testing rxv05
(print rxv05) => << -1 -2 -3 -4 -5 -6 >>
(includes: rxv05 nil) => <False>
(occurrencesOf: rxv05 nil) => 0
(includes: rxv05 <True>) => <False>
(occurrencesOf: rxv05 <True>) => 0
(includes: rxv05 <False>) => <False>
(occurrencesOf: rxv05 <False>) => 0
(includes: rxv05 0) => <False>
(occurrencesOf: rxv05 0) => 0
(includes: rxv05 1) => <False>
(occurrencesOf: rxv05 1) => 0
(includes: rxv05 2) => <False>
(occurrencesOf: rxv05 2) => 0
(includes: rxv05 42) => <False>
(occurrencesOf: rxv05 42) => 0
(detect:ifNone: rxv05 negative) => -1
(detect:ifNone: rxv05 positive) => nil
Testing rxv05
(sum rxv05) => -21
Testing rxv05
(product rxv05) => 720
Testing rxv05
(min rxv05) => -6
Testing rxv05
(max rxv05) => -1
Testing rxv05
(= rxv05 nil) => <False>
(= rxv05 <True>) => <False>
(= rxv05 <False>) => <False>
(= rxv05 0) => <False>
(= rxv05 1) => <False>
(= rxv05 2) => <False>
(= rxv05 42) => <False>
(= rxv05 xv01) => <False>
(= rxv05 xv02) => <False>
(= rxv05 xv03) => <False>
(= rxv05 xv04) => <False>
(= rxv05 xv05) => <False>
(= rxv05 xv06) => <False>
(= rxv05 xv07) => <False>
(= rxv05 xv08) => <False>
(= rxv05 xv09) => <False>
(= rxv05 xv12) => <False>
(= rxv05 xv13) => <False>
(= rxv05 rxv01) => <False>
(= rxv05 rxv02) => <False>
(= rxv05 rxv03) => <False>
(= rxv05 rxv04) => <False>
(= rxv05 rxv05) => <True>
Testing rxv05
(< rxv05 xv01) => <False>
(< rxv05 xv02) => <True>
(< rxv05 xv03) => <True>
(< rxv05 xv04) => <True>
(< rxv05 xv05) => <False>
(< rxv05 xv06) => <False>
(< rxv05 xv07) => <False>
(< rxv05 xv08) => <True>
(< rxv05 xv09) => <True>
(< rxv05 rxv01) => <False>
(< rxv05 rxv02) => <True>
(< rxv05 rxv03) => <True>
(< rxv05 rxv04) => <True>
(< rxv05 rxv05) => <False>
Testing rxv05
(fromIndex:toIndex: rxv05 1 1) => << -1 >>
(fromIndex:toIndex: rxv05 1 2) => << -1 -2 >>
(fromIndex:toIndex: rxv05 1 3) => << -1 -2 -3 >>
(fromIndex:toIndex: rxv05 1 5) => << -1 -2 -3 -4 -5 >>
(fromIndex:toIndex: rxv05 2 2) => << -2 >>
(fromIndex:toIndex: rxv05 2 4) => << -2 -3 -4 >>
(fromIndex:toIndex: rxv05 -1 -1) => << -6 >>
(fromIndex:toIndex: rxv05 -2 -1) => << -5 -6 >>
(fromIndex:toIndex: rxv05 -3 -1) => << -4 -5 -6 >>
(fromIndex:toIndex: rxv05 -5 -1) => << -2 -3 -4 -5 -6 >>
(fromIndex:toIndex: rxv05 -2 -2) => << -5 >>
(fromIndex:toIndex: rxv05 -4 -2) => << -3 -4 -5 >>
(fromIndex:toIndex: rxv05 -1 1) => << -6 -1 >>
(fromIndex:toIndex: rxv05 -2 2) => << -5 -6 -1 -2 >>
(fromIndex:toIndex: rxv05 -3 3) => << -4 -5 -6 -1 -2 -3 >>
(fromIndex:toIndex: rxv05 -4 4) => << -3 -4 >>
(fromIndex:toIndex: rxv05 -5 5) => << -2 -3 -4 -5 >>
