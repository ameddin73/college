(List ctor) bst1 = { 1, 3, 5, 4 };
Creating empty tree (default ctor)
Creating tree from initializer list
Creating leaf: 1
At right of node: 1
Creating leaf: 3
At right of node: 3
Creating leaf: 5
At left of node: 5
Creating leaf: 4
bst1: 1 3 4 5 

(Copy ctor) bst2 = bst1;
Creating empty tree (default ctor)
Copy constructing tree
Node: 4 copy constructed
Node: 4 copy constructed
Node: 4 destructing
Node: 5 copy constructed
Node: 4 copy constructed
Node: 4 copy constructed
Node: 4 destructing
Node: 5 copy constructed
Node: 5 destructing
Node: 4 destructing
Node: 3 copy constructed
Node: 4 copy constructed
Node: 4 copy constructed
Node: 4 destructing
Node: 5 copy constructed
Node: 4 copy constructed
Node: 4 copy constructed
Node: 4 destructing
Node: 5 copy constructed
Node: 5 destructing
Node: 4 destructing
Node: 3 copy constructed
Node: 3 destructing
Node: 5 destructing
Node: 4 destructing
Node: 1 copy constructed
Node: 4 copy constructed
Node: 4 copy constructed
Node: 4 destructing
Node: 5 copy constructed
Node: 4 copy constructed
Node: 4 copy constructed
Node: 4 destructing
Node: 5 copy constructed
Node: 5 destructing
Node: 4 destructing
Node: 3 copy constructed
Node: 4 copy constructed
Node: 4 copy constructed
Node: 4 destructing
Node: 5 copy constructed
Node: 4 copy constructed
Node: 4 copy constructed
Node: 4 destructing
Node: 5 copy constructed
Node: 5 destructing
Node: 4 destructing
Node: 3 copy constructed
Node: 3 destructing
Node: 5 destructing
Node: 4 destructing
Node: 1 copy constructed
Node: 1 destructing
Node: 3 destructing
Node: 5 destructing
Node: 4 destructing
bst2: 1 3 4 5 

(Copy assignment) bst2 = bst1;
Copy assignment tree
Clearing out left hand side
Node: 1 destructing
Node: 3 destructing
Node: 5 destructing
Node: 4 destructing
Copying root to left hand side
Node: 4 copy constructed
Node: 4 copy constructed
Node: 4 destructing
Node: 5 copy constructed
Node: 4 copy constructed
Node: 4 copy constructed
Node: 4 destructing
Node: 5 copy constructed
Node: 5 destructing
Node: 4 destructing
Node: 3 copy constructed
Node: 4 copy constructed
Node: 4 copy constructed
Node: 4 destructing
Node: 5 copy constructed
Node: 4 copy constructed
Node: 4 copy constructed
Node: 4 destructing
Node: 5 copy constructed
Node: 5 destructing
Node: 4 destructing
Node: 3 copy constructed
Node: 3 destructing
Node: 5 destructing
Node: 4 destructing
Node: 1 copy constructed
Node: 4 copy constructed
Node: 4 copy constructed
Node: 4 destructing
Node: 5 copy constructed
Node: 4 copy constructed
Node: 4 copy constructed
Node: 4 destructing
Node: 5 copy constructed
Node: 5 destructing
Node: 4 destructing
Node: 3 copy constructed
Node: 4 copy constructed
Node: 4 copy constructed
Node: 4 destructing
Node: 5 copy constructed
Node: 4 copy constructed
Node: 4 copy constructed
Node: 4 destructing
Node: 5 copy constructed
Node: 5 destructing
Node: 4 destructing
Node: 3 copy constructed
Node: 3 destructing
Node: 5 destructing
Node: 4 destructing
Node: 1 copy constructed
Node: 1 destructing
Node: 3 destructing
Node: 5 destructing
Node: 4 destructing
bst1: 1 3 4 5 

(Default ctor) lincolnBST1;
Creating empty tree (default ctor)

lincolnBST1 << "give" << "me" << "six" << (...) << "axe";
Creating leaf: give
At right of node: give
Creating leaf: me
At right of node: me
Creating leaf: six
At left of node: me
Creating leaf: hours
At right of node: six
Creating leaf: to
At left of node: give
Creating leaf: chop
At right of node: chop
Creating leaf: down
At left of node: chop
Creating leaf: a
At left of node: a
Creating leaf: BST
At right of node: a
Creating leaf: and
At right of node: BST
Creating leaf: I
At right of node: to
Creating leaf: will
At left of node: to
Creating leaf: spend
At right of node: spend
Creating leaf: the
At right of node: down
Creating leaf: first
At right of node: first
Creating leaf: four
At left of node: six
Creating leaf: sharpening
At left of node: the
Creating leaf: the
At right of node: and
Creating leaf: axe

(Move ctor) lincolnBST2{move(lincolnBST1)};
Move constructor tree
lincolnBST1: 
lincolnBST2: BST I a and axe chop down first four give hours me sharpening six spend the the to will 

lincolnBST1 << "I" << "like" << "beards"
Creating leaf: I
At right of node: I
Creating leaf: like
At left of node: like
Creating leaf: beards

(Move assignment) lincolnBST1 = move(lincolnBST2)};
Move assignment tree
Clearing out left hand side
Node: I destructing
Node: like destructing
Node: beards destructing
Moving root to left hand side
lincolnBST1: BST I a and axe chop down first four give hours me sharpening six spend the the to will 
lincolnBST2: 

Function main() finishing.
Destructing tree
Destructing tree
Node: give destructing
Node: me destructing
Node: six destructing
Node: to destructing
Node: will destructing
Node: spend destructing
Node: the destructing
Node: the destructing
Node: sharpening destructing
Node: hours destructing
Node: chop destructing
Node: down destructing
Node: first destructing
Node: four destructing
Node: a destructing
Node: and destructing
Node: axe destructing
Node: BST destructing
Node: I destructing
Destructing tree
Node: 1 destructing
Node: 3 destructing
Node: 5 destructing
Node: 4 destructing
Destructing tree
Node: 1 destructing
Node: 3 destructing
Node: 5 destructing
Node: 4 destructing
